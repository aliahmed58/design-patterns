Scenario: Configuration Management System

You are working on the development of a complex software application that requires a centralized configuration management system. The system must ensure that there is a single point of access to configuration settings throughout the application's lifecycle. Each configuration setting can be dynamically modified, and these changes should be reflected instantly across all modules of the application.

Requirements:
1. There should be a single configuration manager responsible for storing and managing all configuration settings.
2. The configuration manager should provide methods to retrieve, update, and add configuration settings.
3. The configuration settings can be of various types, such as strings, integers, and booleans.
4. The system must be thread-safe to handle concurrent access from different parts of the application.
5. The configuration manager should support lazy initialization to optimize resource usage.

Challenges:
1. The configuration manager must be globally accessible, ensuring that any component in the application can access the current configuration settings.
2. It should be possible to extend the system in the future by adding new configuration settings without modifying the existing code.

Tasks:
1. Identify the design pattern that best addresses the challenges and requirements outlined in this scenario.
2. Implement the necessary class or classes for the chosen design pattern to ensure the creation of a single, globally accessible configuration manager.
3. Provide code snippets demonstrating how different modules in the application can access and modify configuration settings using the singleton pattern.